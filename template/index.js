(function(a,o,m,s,f){"use strict";let n=[];f.storage.compatibilityMode===void 0&&(f.storage.compatibilityMode=!1);const r=m.findByProps("setDevice","setMode","activateDevice","startBluetoothSco","setCommunicationMode"),p={BLUETOOTH_HEADSET:"bluetooth_headset"},u={ACTIVATE_DEVICE:"setDevice",SET_COMM_MODE:"setCommunicationMode",START_BT_SCO:"startBluetoothSco",PROXY_METHOD:"someInternalAudioFunction"};var h={onLoad:function(){if(o.logger.log("Bluetooth Audio Fix Plugin Loading..."),!r){o.logger.error("Could not find AudioManager module. Aborting.");return}o.logger.log("Found potential AudioManager module.");try{const e=!!f.storage.compatibilityMode;if(o.logger.log(`Mode: ${e?"Compatibility":"Normal"}`),e){const i=u.SET_COMM_MODE,l=u.START_BT_SCO;if(r[i]){const g=s.instead(i,r,function(t,c){o.logger.log(`Compatibility Mode: Blocking call to ${i}`)});n.push(g),o.logger.log(`Patched ${i} for compatibility mode.`)}else o.logger.warn(`Could not find function ${i} for compatibility mode patch.`);if(r[l]){const g=s.instead(l,r,function(t,c){o.logger.log(`Compatibility Mode: Blocking call to ${l}`)});n.push(g),o.logger.log(`Patched ${l} for compatibility mode.`)}else o.logger.warn(`Could not find function ${l} for compatibility mode patch.`)}else{const i=u.ACTIVATE_DEVICE,l=u.PROXY_METHOD;if(r[i]){const g=s.instead(i,r,function(t,c){const d=t[0];if(o.logger.log(`Normal Mode: Intercepted ${i} call with deviceType: ${d}`),d!==p.BLUETOOTH_HEADSET)if(o.logger.log("Device is not Bluetooth, attempting proxy call logic (equivalent of 'i')..."),r[l])try{return o.logger.warn(`Calling original function '${i}' instead of unknown proxy '${l}' for non-Bluetooth.`),c(...t)}catch(y){return o.logger.error(`Error calling proxy function ${l}: ${y}`),c(...t)}else return o.logger.warn(`Proxy function ${l} not found. Falling back to calling original ${i} for non-Bluetooth.`),c(...t);else{o.logger.log(`Device is Bluetooth. Preventing original problematic flow for ${i}.`);return}});n.push(g),o.logger.log(`Patched ${i} for normal mode.`)}else o.logger.error(`Could not find function ${i} for normal mode patch. Plugin may not work.`)}}catch(e){o.logger.error(`Error during patching process: ${e}`)}},onUnload:function(){o.logger.log("Bluetooth Audio Fix Plugin Unloading...");for(const e of n)try{e()}catch(i){o.logger.error(`Failed to unpatch: ${i}`)}n=[],o.logger.log("All patches removed.")}};return a.default=h,Object.defineProperty(a,"__esModule",{value:!0}),a})({},vendetta,vendetta.metro,vendetta.patcher,vendetta.plugin);
